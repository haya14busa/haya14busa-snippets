snippet     class
abbr        class Class(...): ...
options     head
	class ${1:#:name}(${2:#:object}):
		def __init__(self, ${3}):
			${0}

snippet     classd
abbr        class Class(...): "..."
options     head
	class ${1:#:name}(${2:#:object}):
		"""${3:#:class documentation}"""
		def __init__(self, ${4}):
			"""${5:#:__init__ documentation}"""
			${0}

snippet     def
abbr        def function(...): ...
options     head
	def ${1:#:name}(${2}):
		${0:TARGET}

snippet     defd
abbr        def function(...): """..."""
options     head
	def ${1:#:name}(${2}):
		"""${3:#:function documentation}"""
		${0:TARGET}

snippet     defm
abbr        def method(self, ...): ...
options     head
	def ${1:#:name}(self, ${2}):
		${0:TARGET}

snippet     defmd
abbr        def method(self, ...): "..."
options     head
	def ${1:#:name}(self, ${2}):
		"""${3:#:method documentation}"""
		${0:TARGET}

snippet     elif
abbr        elif ...: ...
options     head
	elif ${1:#:condition}:
		${0}

snippet     else
abbr        else: ...
options     head
	else:
		${0}

snippet     fileidiom
abbr        f = None try: f = open(...) finally: ...
options     head
	${1:f} = None
	try:
		$1 = open(${2})
		${0:TARGET}
	finally:
	if $1:
		$1.close()

snippet     for
abbr        for ... in ...: ...
options     head
	for ${1:#:value} in ${2:#:list}:
		${0:TARGET}

snippet     if
abbr        if ...: ...
options     head
	if ${1:#:condition}:
		${0:TARGET}

snippet     ifmain
abbr        if __name__ == '__main__': ...
alias       main
options     head
	if __name__ == '__main__':
		${0:TARGET}

snippet     tryexcept
abbr        try: ... except ...: ...
options     head
	try:
		${1:TARGET}
	except ${2:#:ExceptionClass}:
		${3}

snippet     tryfinally
abbr        try: ... finally: ...
options     head
	try:
		${1:TARGET}
	finally:
		${2}

snippet     while
abbr        while ...: ...
options     head
	while ${1:#:condition}:
		${0:TARGET}

snippet     with
abbr        with open({file}) as :
options     head
	with open(${1:#:filename, mode}) as f:
		${0:TARGET}

snippet     filter
abbr        [x for x in {list} if {condition}]
	[$1 for ${1:x} in ${2:#:list} if ${3:#:condition}]

snippet     print
options     word
  print(${0:TARGET})

#=======================================
snippet     template #{{{
abbr        template
options     head
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-
    # FILE: `expand("%t")`
    # AUTHOR: haya14busa
    # License: MIT license
    #
    #     Permission is hereby granted, free of charge, to any person obtaining
    #     a copy of this software and associated documentation files (the
    #     "Software"), to deal in the Software without restriction, including
    #     without limitation the rights to use, copy, modify, merge, publish,
    #     distribute, sublicense, and/or sell copies of the Software, and to
    #     permit persons to whom the Software is furnished to do so, subject to
    #     the following conditions:
    #
    #     The above copyright notice and this permission notice shall be included
    #     in all copies or substantial portions of the Software.
    #
    #     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    #     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    #     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    #     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    #     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    #     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    #     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    #


    def main():
        ${0:TARGET}

    if __name__ == '__main__':
         main()
#}}}

snippet     defmain
abbr        def main(): ...
alias       defm
options     head
	def main():
		${0:TARGET}

snippet     init
abbr        def __init__(self, ...): ...
alias       __init__
options     head
	def __init__(self, ${1}):
		${0}


snippet     procon_temp
abbr        template_procon
alias       tp
options     head
	#!/usr/bin/env python3
	# -*- coding: utf-8 -*-
	# AUTHOR: haya14busa
	import sys
	import io
	
	
	def solve():
	    pass
	
	
	def getinput():
	    def getint():
	        return int(input())
	
	    def getints_line():
	        return list(map(int, input().split(' ')))
	
	    def getints_lines(n):
	        return [getints_line() for _ in range(n)]
	    return []
	
	
	def iosolve():
	    return str(solve(*getinput()))
	    # return 'YES' if solve(*getinput()) else 'NO' # for boolean output
	    # return '\n'.join(map(str, solve(*getinput()))) # for multiple line output
	
	
	def main():
	    if sys.stdin.isatty():
	        test()
	    stdin_lines = getstdin_lines()
	    sys.stdin = io.StringIO('\n'.join(stdin_lines))
	    if stdin_lines:
	        print(iosolve())
	    else:
	        test()
	
	
	def test():
	    IO_TEST_CASES = [
	
	        # (
	        #     # INPUT
	        #     '''\
	        #     ''',
	        #     # EXPECT
	        #     '''\
	        #     '''
	        # ),
	
	    ]
	
	    # List[(List[arg for solve()], expect)]
	    TEST_CASES = [
	        # ([], None),
	    ]
	
	    # You do need to see below
	    import unittest  # to save memory, import only if test required
	    import sys
	    import io
	
	    class Assert(unittest.TestCase):
	        def equal(self, a, b):
	            self.assertEqual(a, b)
	
	        def float_equal(self, actual, expect, tolerance):
	            self.assertTrue(expect - tolerance < actual < expect + tolerance)
	
	    art = Assert()
	
	    for inputs, expect in TEST_CASES:
	        art.equal(solve(*inputs), expect)
	
	    for stdin, expect in IO_TEST_CASES:
	        sys.stdin = io.StringIO(stdin.strip())
	        art.equal(iosolve(), expect.strip())
	        # art.float_equal(float(iosolve()), float(expect.strip()), 10 ** -6)
	
	
	def getstdin_lines():
	    stdin = []
	    while 1:
	        try:
	            stdin.append(input())
	        except EOFError:
	            break
	    return stdin
	
	if __name__ == '__main__':
	    main()

# vim: fdm=marker:et:ts=4:sw=4:sts=4
